// src/logger.js

const fs = require('fs');
const path = require('path');
const { getTimestamp, writeToFile, colorize } = require('./utils');

/**
 * @typedef {Object} LoggerOptions
 * @property {string} [logDirectory] - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
 * @property {string} [logLevel] - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ('error', 'warn', 'info', 'verbose', 'debug', 'silly')
 * @property {Object} [colors] - –û–±—ä–µ–∫—Ç —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
 * @property {Object} [prefixes] - –û–±—ä–µ–∫—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
 * @property {boolean} [useEmoji] - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –ø—Ä–µ—Ñ–∏–∫—Å–∞—Ö
 * @property {number} [maxFileSize] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –≤ –±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5MB)
 * @property {Array<RegExp>} [maskPatterns] - –ú–∞—Å—Å–∏–≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * @property {string} [moduleTag] - –¢–µ–≥ –º–æ–¥—É–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
 */

/**
 * –ö–ª–∞—Å—Å Logger –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
class Logger {
  /**
   * –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Logger
   * @param {LoggerOptions} [options] - –û–ø—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  constructor(options = {}) {
    this.logFormat = options.logFormat || 'text';
    this.logDirectory = options.logDirectory || 'logs';
    this.logLevel = options.logLevel || 'info';
    this.colors = options.colors || {
      error: 'red',
      warn: 'yellow',
      info: 'green',
      verbose: 'blue',
      debug: 'cyan',
      silly: 'magenta',
    };
    this.prefixes = options.prefixes || {
      error: '[ERROR]',
      warn: '[WARN]',
      info: '[INFO]',
      verbose: '[VERBOSE]',
      debug: '[DEBUG]',
      silly: '[SILLY]',
    };
    this.useEmoji = options.useEmoji || false;
    this.maxFileSize = options.maxFileSize || 5 * 1024 * 1024; // 5MB
    this.maskPatterns = options.maskPatterns || []; // –ú–∞—Å—Å–∏–≤ RegExp
    this.moduleTag = options.moduleTag || ''; // –¢–µ–≥ –º–æ–¥—É–ª—è
    this.enableWebServer = options.enableWebServer || false;
    this.webServerPort = options.webServerPort || 3000;
    this.webClients = [];
  
    if (this.enableWebServer) this.startWebServer();
    // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(this.logDirectory)) fs.mkdirSync(this.logDirectory, { recursive: true });

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.levels = {
      'error': 0,
      'warn': 1,
      'info': 2,
      'verbose': 3,
      'debug': 4,
      'silly': 5,
    };

    this.currentLevel = this.levels[this.logLevel] !== undefined ? this.levels[this.logLevel] : 2;

    // –ö—ç—à –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–ø–∏—Å–∏
    this.streams = {};

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    Object.keys(this.levels).forEach((level) => {
      this.streams[level] = fs.createWriteStream(
        path.join(this.logDirectory, `${level}.log`),
        { flags: 'a' }
      );
    });
    this.streams['combined'] = fs.createWriteStream(
      path.join(this.logDirectory, 'combined.log'),
      { flags: 'a' }
    );
    this.streams['exceptions'] = fs.createWriteStream(
      path.join(this.logDirectory, 'exceptions.log'),
      { flags: 'a' }
    );
  }

  startWebServer() {
    const http = require('http');
    const url = require('url');
  
    this.server = http.createServer((req, res) => {
      const parsedUrl = url.parse(req.url, true);
  
      if (parsedUrl.pathname === '/logs') {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
        res.writeHead(200, {
          'Content-Type': 'text/event-stream',
          'Cache-Control': 'no-cache',
          Connection: 'keep-alive',
        });
        res.write('\n');
  
        this.webClients.push(res);
  
        req.on('close', () => {
          this.webClients = this.webClients.filter((client) => client !== res);
        });
      } else if (parsedUrl.pathname === '/') {
        // –û—Ç–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.end(`
          <!DOCTYPE html>
          <html>
          <head>
            <title>Real-time Logs</title>
          </head>
          <body>
            <h1>Real-time Logs</h1>
            <pre id="logs"></pre>
            <script>
              const eventSource = new EventSource('/logs');
              eventSource.onmessage = function(event) {
                const logs = document.getElementById('logs');
                logs.textContent += event.data + '\\n';
              };
            </script>
          </body>
          </html>
        `);
      } else {
        res.writeHead(404);
        res.end();
      }
    });
  
    this.server.listen(this.webServerPort, () => {
      console.log(`Logger web server started on port ${this.webServerPort}`);
    });
  }

  stopWebServer() {
    if (this.server) {
      this.server.close();
      this.webClients.forEach((client) => client.end());
      this.webClients = [];
    }
  }

  close() {
    Object.values(this.streams).forEach((stream) => {
      stream.end();
    });
    this.stopWebServer();
  }  

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {string} format –§–æ—Ä–º–∞—Ç ('text' –∏–ª–∏ 'json')
   */
  setLogFormat(format) {
    if (format === 'text' || format === 'json') this.logFormat = format;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
   * @returns {string} –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  applyMasking(message) {
    let maskedMessage = message;
    this.maskPatterns.forEach((pattern) => {
      maskedMessage = maskedMessage.replace(pattern, '[MASKED]');
    });
    return maskedMessage;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
   * @param {string} level –£—Ä–æ–≤–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {boolean}
   */
  shouldLog(level) {
    return this.levels[level] <= this.currentLevel;
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} level –£—Ä–æ–≤–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  log(level, message) {
    if (this.shouldLog(level)) {
      if (this.shouldLog(level)) {
        const maskedMessage = this.applyMasking(message);
        const timestamp = getTimestamp();
        let prefix = this.prefixes[level] || `[${level.toUpperCase()}]`;
    
        if (this.useEmoji) {
          const emojis = {
            error: '‚ùå',
            warn: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è',
            verbose: 'üîç',
            debug: 'üêû',
            silly: 'üéâ',
          };
          prefix = `${emojis[level] || ''} ${prefix}`;
        }
    
        const moduleInfo = this.moduleTag ? `[${this.moduleTag}] ` : '';
        const color = this.colors[level] || 'white';
    
        let formattedMessage;
    
        if (this.logFormat === 'json') {
          formattedMessage = JSON.stringify({
            timestamp,
            level,
            module: this.moduleTag || undefined,
            message: maskedMessage,
          });
        } else {
          formattedMessage = `${timestamp} ${prefix}: ${moduleInfo}${maskedMessage}`;
        }
    
        console.log(colorize(formattedMessage, color));
        this.writeToStream(level, formattedMessage);
        this.writeToStream('combined', formattedMessage);
      }
      if (this.webClients.length > 0) {
        const sseMessage = `data: ${formattedMessage.replace(/\n/g, '')}\n\n`;
        this.webClients.forEach((client) => {
          client.write(sseMessage);
        });
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–æ—Ç–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   * @param {string} streamName –ò–º—è –ø–æ—Ç–æ–∫–∞
   */
  checkFileSizeAndRotate(streamName) {
    const filePath = path.join(this.logDirectory, `${streamName}.log`);
    fs.stat(filePath, (err, stats) => {
      if (!err && stats.size >= this.maxFileSize) {
        const timestamp = getTimestamp().replace(/[:\s]/g, '_');
        const newFilePath = path.join(this.logDirectory, `${streamName}-${timestamp}.log`);
        fs.rename(filePath, newFilePath, (err) => {
          if (!err) {
            this.streams[streamName].end();
            this.streams[streamName] = fs.createWriteStream(filePath, { flags: 'a' });
          }
        });
      }
    });
  }

  /**
   * –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫
   * @param {string} streamName –ò–º—è –ø–æ—Ç–æ–∫–∞
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
   */
  writeToStream(streamName, message) {
    this.checkFileSizeAndRotate(streamName);
    if (this.streams[streamName]) {
      this.streams[streamName].write(message + '\n');
    } else {
      const filePath = path.join(this.logDirectory, `${streamName}.log`);
      this.streams[streamName] = fs.createWriteStream(filePath, { flags: 'a' });
      this.streams[streamName].write(message + '\n');
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  info(message) {
    this.log('info', message);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  warn(message) {
    this.log('warn', message);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  error(message) {
    this.log('error', message);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  verbose(message) {
    this.log('verbose', message);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  debug(message) {
    this.log('debug', message);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ–Ω—å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  silly(message) {
    this.log('silly', message);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
   * @param {string} level –£—Ä–æ–≤–µ–Ω—å
   * @param {string} color –¶–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white')
   */
  setColor(level, color) {
    if (this.colors[level]) {
      this.colors[level] = color;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
   * @param {string} level –£—Ä–æ–≤–µ–Ω—å
   * @param {string} prefix –ü—Ä–µ—Ñ–∏–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '[ERROR]')
   */
  setPrefix(level, prefix) {
    if (this.prefixes[level]) {
      this.prefixes[level] = prefix;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {string} level –£—Ä–æ–≤–µ–Ω—å ('error', 'warn', 'info', 'verbose', 'debug', 'silly')
   */
  setLogLevel(level) {
    if (this.levels[level] !== undefined) {
      this.logLevel = level;
      this.currentLevel = this.levels[level];
    }
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ –ø—Ä–µ—Ñ–∏–∫—Å–∞—Ö
   * @param {boolean} useEmoji
   */
  setUseEmoji(useEmoji) {
    this.useEmoji = useEmoji;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
   * @param {number} maxSize –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
   */
  setMaxFileSize(maxSize) {
    if (typeof maxSize === 'number' && maxSize > 0) {
      this.maxFileSize = maxSize;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   * @param {RegExp} pattern –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
   */
  addMaskPattern(pattern) {
    if (pattern instanceof RegExp) {
      this.maskPatterns.push(pattern);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–≥–∞ –º–æ–¥—É–ª—è
   * @param {string} tag –¢–µ–≥ –º–æ–¥—É–ª—è
   */
  setModuleTag(tag) {
    this.moduleTag = tag;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
   */
  close() {
    Object.values(this.streams).forEach((stream) => {
      stream.end();
    });
  }
}

module.exports = Logger;
